/*!
 * # Semantic UI - Colorize
 * http://github.com/semantic-org/semantic-ui/
 *
 *
 * Copyright 2015 Contributors
 * Released under the MIT license
 * http://opensource.org/licenses/MIT
 *
 */
!function(e,t,i,n){"use strict";e.fn.colorize=function(t){var i=e.isPlainObject(t)?e.extend(!0,{},e.fn.colorize.settings,t):e.extend({},e.fn.colorize.settings),a=arguments||!1;return e(this).each(function(t){var o,r,l,s,c,d,u,m,p=e(this),h=e("<canvas />")[0],g=e("<canvas />")[0],f=e("<canvas />")[0],b=new Image,v=i.colors,T=(i.paths,i.namespace),E=i.error,y=p.data("module-"+T);return m={checkPreconditions:function(){return m.debug("Checking pre-conditions"),!e.isPlainObject(v)||e.isEmptyObject(v)?(m.error(E.undefinedColors),!1):!0},async:function(e){i.async?setTimeout(e,0):e()},getMetadata:function(){m.debug("Grabbing metadata"),s=p.data("image")||i.image||n,c=p.data("name")||i.name||t,d=i.width||p.width(),u=i.height||p.height(),(0===d||0===u)&&m.error(E.undefinedSize)},initialize:function(){m.debug("Initializing with colors",v),m.checkPreconditions()&&m.async(function(){m.getMetadata(),m.canvas.create(),m.draw.image(function(){m.draw.colors(),m.canvas.merge()}),p.data("module-"+T,m)})},redraw:function(){m.debug("Redrawing image"),m.async(function(){m.canvas.clear(),m.draw.colors(),m.canvas.merge()})},change:{color:function(e,t){return m.debug("Changing color",e),v[e]===n?(m.error(E.missingColor),!1):(v[e]=t,void m.redraw())}},canvas:{create:function(){m.debug("Creating canvases"),h.width=d,h.height=u,g.width=d,g.height=u,f.width=d,f.height=u,o=h.getContext("2d"),r=g.getContext("2d"),l=f.getContext("2d"),p.append(h),o=p.children("canvas")[0].getContext("2d")},clear:function(e){m.debug("Clearing canvas"),l.fillStyle="#FFFFFF",l.fillRect(0,0,d,u)},merge:function(){return e.isFunction(o.blendOnto)?(o.putImageData(r.getImageData(0,0,d,u),0,0),void l.blendOnto(o,"multiply")):void m.error(E.missingPlugin)}},draw:{image:function(e){m.debug("Drawing image"),e=e||function(){},s?(b.src=s,b.onload=function(){r.drawImage(b,0,0),e()}):(m.error(E.noImage),e())},colors:function(){m.debug("Drawing color overlays",v),e.each(v,function(e,t){i.onDraw(l,c,e,t)})}},debug:function(e,t){i.debug&&(t!==n?console.info(i.name+": "+e,t):console.info(i.name+": "+e))},error:function(e){console.warn(i.name+": "+e)},invoke:function(t,a,o){var r;return o=o||Array.prototype.slice.call(arguments,2),"string"==typeof t&&y!==n&&(t=t.split("."),e.each(t,function(t,n){return e.isPlainObject(y[n])?(y=y[n],!0):e.isFunction(y[n])?(r=y[n],!0):(m.error(i.error.method),!1)})),e.isFunction(r)?r.apply(a,o):!1}},y!==n&&a?("invoke"==a[0]&&(a=Array.prototype.slice.call(a,1)),m.invoke(a[0],this,Array.prototype.slice.call(a,1))):void m.initialize()}),this},e.fn.colorize.settings={name:"Image Colorizer",debug:!0,namespace:"colorize",onDraw:function(e,t,i,n){},async:!0,colors:{},metadata:{image:"image",name:"name"},error:{noImage:"No tracing image specified",undefinedColors:"No default colors specified.",missingColor:"Attempted to change color that does not exist",missingPlugin:"Blend onto plug-in must be included",undefinedHeight:"The width or height of image canvas could not be automatically determined. Please specify a height."}}}(jQuery,window,document);